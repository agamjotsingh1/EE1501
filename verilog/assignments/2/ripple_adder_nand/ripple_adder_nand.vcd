$date
	Mon Apr 21 19:51:19 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module tb_ripple_adder_nand $end
$var wire 4 ! sum [3:0] $end
$var wire 1 " cout $end
$var reg 4 # a [3:0] $end
$var reg 4 $ b [3:0] $end
$var reg 1 % cin $end
$scope module dut $end
$var wire 4 & a [3:0] $end
$var wire 4 ' b [3:0] $end
$var wire 1 % cin $end
$var wire 4 ( sum [3:0] $end
$var wire 1 ) cout3 $end
$var wire 1 * cout2 $end
$var wire 1 + cout1 $end
$var wire 1 " cout $end
$scope module adder1 $end
$var wire 1 , a $end
$var wire 1 - b $end
$var wire 1 % cin $end
$var wire 1 . sum $end
$var wire 1 / or1 $end
$var wire 1 + cout $end
$var wire 1 0 and3 $end
$var wire 1 1 and2 $end
$var wire 1 2 and1 $end
$var wire 1 3 ab_xor $end
$scope module and_gate1 $end
$var wire 1 , a $end
$var wire 1 4 ab_nand $end
$var wire 1 - b $end
$var wire 1 2 out $end
$upscope $end
$scope module and_gate2 $end
$var wire 1 % a $end
$var wire 1 5 ab_nand $end
$var wire 1 , b $end
$var wire 1 1 out $end
$upscope $end
$scope module and_gate3 $end
$var wire 1 % a $end
$var wire 1 6 ab_nand $end
$var wire 1 - b $end
$var wire 1 0 out $end
$upscope $end
$scope module or_gate1 $end
$var wire 1 2 a $end
$var wire 1 7 a_not $end
$var wire 1 1 b $end
$var wire 1 8 b_not $end
$var wire 1 / out $end
$upscope $end
$scope module or_gate2 $end
$var wire 1 0 a $end
$var wire 1 9 a_not $end
$var wire 1 / b $end
$var wire 1 : b_not $end
$var wire 1 + out $end
$upscope $end
$scope module xor_gate1 $end
$var wire 1 , a $end
$var wire 1 ; a_ab_nand $end
$var wire 1 < ab_nand $end
$var wire 1 - b $end
$var wire 1 = b_ab_nand $end
$var wire 1 3 out $end
$upscope $end
$scope module xor_gate2 $end
$var wire 1 3 a $end
$var wire 1 > a_ab_nand $end
$var wire 1 ? ab_nand $end
$var wire 1 % b $end
$var wire 1 @ b_ab_nand $end
$var wire 1 . out $end
$upscope $end
$upscope $end
$scope module adder2 $end
$var wire 1 A a $end
$var wire 1 B b $end
$var wire 1 + cin $end
$var wire 1 C sum $end
$var wire 1 D or1 $end
$var wire 1 * cout $end
$var wire 1 E and3 $end
$var wire 1 F and2 $end
$var wire 1 G and1 $end
$var wire 1 H ab_xor $end
$scope module and_gate1 $end
$var wire 1 A a $end
$var wire 1 I ab_nand $end
$var wire 1 B b $end
$var wire 1 G out $end
$upscope $end
$scope module and_gate2 $end
$var wire 1 + a $end
$var wire 1 J ab_nand $end
$var wire 1 A b $end
$var wire 1 F out $end
$upscope $end
$scope module and_gate3 $end
$var wire 1 + a $end
$var wire 1 K ab_nand $end
$var wire 1 B b $end
$var wire 1 E out $end
$upscope $end
$scope module or_gate1 $end
$var wire 1 G a $end
$var wire 1 L a_not $end
$var wire 1 F b $end
$var wire 1 M b_not $end
$var wire 1 D out $end
$upscope $end
$scope module or_gate2 $end
$var wire 1 E a $end
$var wire 1 N a_not $end
$var wire 1 D b $end
$var wire 1 O b_not $end
$var wire 1 * out $end
$upscope $end
$scope module xor_gate1 $end
$var wire 1 A a $end
$var wire 1 P a_ab_nand $end
$var wire 1 Q ab_nand $end
$var wire 1 B b $end
$var wire 1 R b_ab_nand $end
$var wire 1 H out $end
$upscope $end
$scope module xor_gate2 $end
$var wire 1 H a $end
$var wire 1 S a_ab_nand $end
$var wire 1 T ab_nand $end
$var wire 1 + b $end
$var wire 1 U b_ab_nand $end
$var wire 1 C out $end
$upscope $end
$upscope $end
$scope module adder3 $end
$var wire 1 V a $end
$var wire 1 W b $end
$var wire 1 * cin $end
$var wire 1 X sum $end
$var wire 1 Y or1 $end
$var wire 1 ) cout $end
$var wire 1 Z and3 $end
$var wire 1 [ and2 $end
$var wire 1 \ and1 $end
$var wire 1 ] ab_xor $end
$scope module and_gate1 $end
$var wire 1 V a $end
$var wire 1 ^ ab_nand $end
$var wire 1 W b $end
$var wire 1 \ out $end
$upscope $end
$scope module and_gate2 $end
$var wire 1 * a $end
$var wire 1 _ ab_nand $end
$var wire 1 V b $end
$var wire 1 [ out $end
$upscope $end
$scope module and_gate3 $end
$var wire 1 * a $end
$var wire 1 ` ab_nand $end
$var wire 1 W b $end
$var wire 1 Z out $end
$upscope $end
$scope module or_gate1 $end
$var wire 1 \ a $end
$var wire 1 a a_not $end
$var wire 1 [ b $end
$var wire 1 b b_not $end
$var wire 1 Y out $end
$upscope $end
$scope module or_gate2 $end
$var wire 1 Z a $end
$var wire 1 c a_not $end
$var wire 1 Y b $end
$var wire 1 d b_not $end
$var wire 1 ) out $end
$upscope $end
$scope module xor_gate1 $end
$var wire 1 V a $end
$var wire 1 e a_ab_nand $end
$var wire 1 f ab_nand $end
$var wire 1 W b $end
$var wire 1 g b_ab_nand $end
$var wire 1 ] out $end
$upscope $end
$scope module xor_gate2 $end
$var wire 1 ] a $end
$var wire 1 h a_ab_nand $end
$var wire 1 i ab_nand $end
$var wire 1 * b $end
$var wire 1 j b_ab_nand $end
$var wire 1 X out $end
$upscope $end
$upscope $end
$scope module adder4 $end
$var wire 1 k a $end
$var wire 1 l b $end
$var wire 1 ) cin $end
$var wire 1 m sum $end
$var wire 1 n or1 $end
$var wire 1 " cout $end
$var wire 1 o and3 $end
$var wire 1 p and2 $end
$var wire 1 q and1 $end
$var wire 1 r ab_xor $end
$scope module and_gate1 $end
$var wire 1 k a $end
$var wire 1 s ab_nand $end
$var wire 1 l b $end
$var wire 1 q out $end
$upscope $end
$scope module and_gate2 $end
$var wire 1 ) a $end
$var wire 1 t ab_nand $end
$var wire 1 k b $end
$var wire 1 p out $end
$upscope $end
$scope module and_gate3 $end
$var wire 1 ) a $end
$var wire 1 u ab_nand $end
$var wire 1 l b $end
$var wire 1 o out $end
$upscope $end
$scope module or_gate1 $end
$var wire 1 q a $end
$var wire 1 v a_not $end
$var wire 1 p b $end
$var wire 1 w b_not $end
$var wire 1 n out $end
$upscope $end
$scope module or_gate2 $end
$var wire 1 o a $end
$var wire 1 x a_not $end
$var wire 1 n b $end
$var wire 1 y b_not $end
$var wire 1 " out $end
$upscope $end
$scope module xor_gate1 $end
$var wire 1 k a $end
$var wire 1 z a_ab_nand $end
$var wire 1 { ab_nand $end
$var wire 1 l b $end
$var wire 1 | b_ab_nand $end
$var wire 1 r out $end
$upscope $end
$scope module xor_gate2 $end
$var wire 1 r a $end
$var wire 1 } a_ab_nand $end
$var wire 1 ~ ab_nand $end
$var wire 1 ) b $end
$var wire 1 !" b_ab_nand $end
$var wire 1 m out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
x!"
x~
x}
x|
x{
xz
xy
xx
xw
xv
xu
xt
xs
xr
xq
xp
xo
xn
xm
1l
0k
xj
xi
xh
xg
xf
xe
xd
xc
xb
xa
x`
x_
x^
x]
x\
x[
xZ
xY
xX
1W
0V
xU
xT
xS
xR
xQ
xP
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
xE
xD
xC
1B
0A
x@
x?
x>
x=
x<
x;
x:
x9
x8
x7
x6
x5
x4
x3
x2
x1
x0
x/
x.
1-
0,
x+
x*
x)
bx (
b1111 '
b0 &
0%
b1111 $
b0 #
x"
bx !
$end
#1
14
1<
1;
1I
1J
1Q
1P
1^
1_
1f
1e
1s
1t
1{
1z
1@
1?
16
15
#2
02
0=
0G
0F
0R
0\
0[
0g
0q
0p
0|
00
01
#3
17
13
1L
1M
1H
1a
1b
1]
1v
1w
1r
19
18
#4
0>
0D
0Y
0n
0/
#5
bx1 !
bx1 (
1.
1O
1d
1y
1:
#6
0+
#7
1K
1T
1U
#8
0E
0S
#9
1N
bx11 !
bx11 (
1C
#10
0*
#11
1`
1i
1j
#12
0Z
0h
#13
1c
bx111 !
bx111 (
1X
#14
0)
#15
1u
1~
1!"
#16
0o
0}
#17
1x
b1111 !
b1111 (
1m
#18
0"
#50
1%
#51
06
0?
0@
#52
10
1>
1@
#53
09
b1110 !
b1110 (
0.
#54
1+
#55
0K
0T
0U
#56
1E
1S
1U
#57
0N
b1100 !
b1100 (
0C
#58
1*
#59
0`
0i
0j
#60
1Z
1h
1j
#61
0c
b1000 !
b1000 (
0X
#62
1)
#63
0u
0~
0!"
#64
1o
1}
1!"
#65
0x
b0 !
b0 (
0m
#66
1"
#100
